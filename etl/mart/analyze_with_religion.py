from utils.logger import get_logger
import pandas as pd
from sqlalchemy import text
from utils.db import get_engine

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

engine = get_engine()
logger = get_logger("analyze_with_religion", "logs/analyze_with_religion.log")

def analyze_religion_vs_indicator(
    indicator_table: str,
    indicator_col: str,
    religion_rank: str,
    top_n: int,
    include_tags: bool
) -> pd.DataFrame:
    """
    –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ —Ä–µ–ª–∏–≥–∏–∏ –∏ –¥—Ä—É–≥–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –∫–≤–∞–¥—Ä–∞–Ω—Ç—ã.

    indicator_table: –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –≤ cleansed —Å–æ –≤—Ç–æ—Ä—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'employment')
    indicator_col: –∏–º—è —á–∏—Å–ª–æ–≤–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –≤ —ç—Ç–æ–π —Ç–∞–±–ª–∏—Ü–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'unemployment')
    religion_rank: 'first' | 'second' | 'third' ‚Äì –∫–∞–∫–æ–π –ø–æ —Å—á—ë—Ç—É —Ä–µ–ª–∏–≥–∏—é –±—Ä–∞—Ç—å
    top_n: —Å–∫–æ–ª—å–∫–æ —Ç–æ–ø-–∞—Ä—Ç–∏—Å—Ç–æ–≤
    include_tags: –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å –ª–∏ –∏–∑ cleansed.artist_tag
    """
    # --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–µ–ª–∏–≥–∏—è–º ---
    pct_col = f"{religion_rank}_percent"
    rel_col = f"{religion_rank}_popular_religion"
    
    df_rel = pd.read_sql(text(f"""
        SELECT iso2,
               nation AS country,
               {rel_col} AS religion_name,
               {pct_col} AS religion_percent
        FROM cleansed.nation_top_religions
        WHERE {pct_col} IS NOT NULL
    """), engine)
    logger.info(f"Loaded df_rel rows: {len(df_rel)}")

    # --- –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è ---
    
    df_ind = pd.read_sql(text(f"""
        SELECT iso2,
               name AS country,
               {indicator_col} AS indicator_value
        FROM cleansed.{indicator_table}
        WHERE {indicator_col} IS NOT NULL
    """), engine)
    logger.info(f"Loaded df_ind rows: {len(df_ind)}")

    # --- –®–∞–≥ 3: –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ iso2 –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º country ---
    
    df = pd.merge(
        df_rel,
        df_ind,
        on='iso2',
        how='inner',
        suffixes=('_rel', '_ind')
    )
    logger.info(f"After merge, rows: {len(df)}")

    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ country –∫–æ–ª–æ–Ω–∫–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –∏–∑ —Ä–µ–ª–∏–≥–∏–π
    df['country'] = df['country_rel']
    df = df.drop(columns=['country_rel', 'country_ind'])
    

    # --- –®–∞–≥ 4: –°—Ç—Ä–æ–∏–º —É—Ä–æ–≤–Ω–∏ –∏ –∫–≤–∞–¥—Ä–∞–Ω—Ç—ã ---
    median_rel = df['religion_percent'].median()
    median_ind = df['indicator_value'].median()
    df['X_level'] = pd.cut(
        df['religion_percent'],
        bins=[-float('inf'), median_rel, float('inf')],
        labels=['low', 'high']
    )
    df['Y_level'] = pd.cut(
        df['indicator_value'],
        bins=[-float('inf'), median_ind, float('inf')],
        labels=['low', 'high']
    )
    df['quadrant'] = df['X_level'].astype(str) + '_' + df['Y_level'].astype(str)
    

    # --- –®–∞–≥ 5: –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-–∞—Ä—Ç–∏—Å—Ç–æ–≤ ---
    
    df_top = pd.read_sql(text(f"""
        SELECT * FROM cleansed.top_50_artist
        WHERE rank <= {top_n}
    """), engine)
    df = df.merge(df_top, on='iso2', how='inner')
    logger.info(f"After adding top artists, rows: {len(df)}")

    # --- –®–∞–≥ 6: –¢–µ–≥–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ---
    if include_tags:
        
        df_tag = pd.read_sql("SELECT * FROM cleansed.artist_tag", engine)
        df['artist_clean'] = df['artist_name'].str.lower().str.strip()
        df_tag['artist_clean'] = df_tag['name'].str.lower().str.strip()
        df = df.merge(df_tag[['artist_clean', 'tag']], on='artist_clean', how='left')
        logger.info(f"After merging tags, rows: {len(df)}")
    else:
        df['tag'] = None
        logger.info("Skipping tag merge (include_tags=False)")

    # --- –®–∞–≥ 7: –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–∏–¥ ---
    
    group_cols = ['quadrant', 'country', 'religion_name', 'religion_percent', 'indicator_value', 'artist_name', 'tag']
    df_result = (
        df
        .drop_duplicates(subset=group_cols)
        .rename(columns={
            'artist_name': 'artist',
            'religion_name': f'{religion_rank}_religion',
            'religion_percent': f'{religion_rank}_percent',
            'indicator_value': indicator_col
        })
        .sort_values(['quadrant', 'country'])
    )
    logger.info(f"Final result rows: {len(df_result)}")

    # --- –®–∞–≥ 8: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ mart ---
    table_name = f"quadrant_{religion_rank}_religion__{indicator_col}".lower()
    
    with engine.connect() as conn:
        conn.execute(text(f"DROP TABLE IF EXISTS mart.{table_name}"))
        conn.commit()
    df_result.to_sql(table_name, engine, schema="mart", if_exists="append", index=False)
    print(f"üõ¢Ô∏è –ó–∞–ø–∏—Å–∞–Ω–æ –≤ mart.{table_name}")

    return df_result
